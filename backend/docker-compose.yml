services: 
  # auth:
  #   # build:
  #   #   context: ./NFTVC-auth
  #   #   dockerfile: Dockerfile
  #   image: nftvc-auth
  #   ports:
  #     - "8081:8081"
  #   depends_on:
  #     mongodb:
  #       condition: service_healthy
  #     redis: 
  #       condition: service_healthy
  #   networks:
  #     - app_network

  # s3:
  #   # build: 
  #   #   context: ./NFTVC-s3
  #   #   dockerfile: Dockerfile
  #   image: nftvc-s3
  #   ports: 
  #    - "8083:8083"
  #   depends_on:
  #     mongodb:
  #       condition: service_healthy
  #   networks:
  #     - app_network

  # profile:
  #   build: 
  #     context: ./NFTVC-profiles
  #     dockerfile: Dockerfile
  #   ports: 
  #    - "8082:8082"
  #   depends_on:
  #     mongodb:
  #       condition: service_healthy
  #     s3: 
  #       condition: service_started
  #   networks:
  #     - app_network

  mongodb:
    image: mongodb/mongodb-community-server:6.0-ubi8
    environment:
      - MONGODB_INITDB_ROOT_USERNAME=user
      - MONGODB_INITDB_ROOT_PASSWORD=password
    ports:
      - "27017:27017"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 10s
    volumes:
      - type: volume
        source: mongodb-volume-data
        target: /var/lib/mongodb
    networks:
      - app_network

  # redis:
  #   image: redis:alpine
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis:/data
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 15s         
  #     timeout: 5s        
  #     retries: 3           
  #     start_period: 5s
  #   networks:
  #     - app_network

volumes:
  mongodb-volume-data:
  # redis:

networks:
  app_network: